#!/usr/bin/env python3
import argparse
import json
from typing import Optional


def init_argparse() -> argparse.ArgumentParser:
    """
    Initialize the argument parser.

    Returns
    -------
    argparse.ArgumentParser
        The ArgumentParser object.
    """
    parser = argparse.ArgumentParser(description="Beutify a javascript file")
    parser.add_argument("input_file", help="The json file to beautify", nargs="?")
    parser.add_argument(
        "--indent", default=4, help="Indent level. (default: 4)", type=int
    )
    parser.add_argument("-o", "--output", help="Path to output file.")
    parser.add_argument(
        "--sort-keys",
        action=argparse.BooleanOptionalAction,
        default=True,
        help="Whether or not to sort the keys.",
    )
    return parser


def beautify(
    *, indent: int = 4, input_file: str, output: Optional[str], sort_keys: bool = True
) -> None:
    """
    Beautify the json data.

    Parameters
    ----------
    indent : int, default 4
        The indent level.
    input_file : str
        The path to the input file.
    output : str, Optional
        The path to the output file.
    sort_keys : bool, default True
        Whether or not to sort the keys.
    """
    try:
        with open(input_file, mode="r") as file_obj:
            json_data = json.load(file_obj)

        pretty_json_data = json.dumps(json_data, sort_keys=sort_keys, indent=indent)

        if output is not None:
            with open(output, mode="w") as output_file:
                output_file.write(pretty_json_data)
        else:
            print(pretty_json_data)

    except FileNotFoundError:
        raise FileNotFoundError(f"File: {input_file} does not exist")


def main():
    parser = init_argparse()
    args = parser.parse_args()
    beautify(
        indent=args.indent,
        input_file=args.input_file,
        output=args.output,
        sort_keys=args.sort_keys,
    )


if __name__ == "__main__":
    main()
